<template>
  <v-container>
    <Form @submit="onSubmit">
      <Field name="name" v-slot="{ field, meta }">
        <v-text-field
          v-bind="field"
          label="Name"
          :error-messages="meta.errors"
          @input="validateOnInput(meta)"
          @blur="validateOnBlur(meta)"
        ></v-text-field>
      </Field>

      <Field name="email" v-slot="{ field, meta }">
        <v-text-field
          v-bind="field"
          label="Email"
          :error-messages="meta.errors"
          @input="validateOnInput(meta)"
          @blur="validateOnBlur(meta)"
        ></v-text-field>
      </Field>

      <Field name="password" v-slot="{ field, meta }">
        <v-text-field
          v-bind="field"
          label="Password"
          type="password"
          :error-messages="meta.errors"
          @input="validateOnInput(meta)"
          @blur="validateOnBlur(meta)"
        ></v-text-field>
      </Field>

      <v-btn type="submit">Submit</v-btn>
    </Form>
  </v-container>
</template>

<script setup>
import { defineRule, configure } from 'vee-validate';
import { useField, useForm, yup } from 'vee-validate';
import { required, email, min } from '@vee-validate/rules';

// 定义验证规则
defineRule('required', required);
defineRule('email', email);
defineRule('min', min);

// 定义Yup模式
const schema = yup.object({
  name: yup.string().required('Name is required'),
  email: yup.string().email('Invalid email').required('Email is required'),
  password: yup.string().min(6, 'Password must be at least 6 characters').required('Password is required')
});

// 配置表单行为
const { handleSubmit } = useForm({
  validationSchema: schema
});

const validateOnInput = (meta) => {
  if (!meta.valid) {
    meta.validate();
  }
};

const validateOnBlur = (meta) => {
  meta.validate();
};

const onSubmit = handleSubmit((values) => {
  alert(JSON.stringify(values));
});
</script>

<style scoped>
/* 这里可以添加一些样式 */
</style>




<template>
  <v-container>
    <v-form @submit.prevent="onSubmit">
      <v-text-field
        v-model="form.textField"
        label="Input Text"
        :error-messages="errors.textField"
        @input="validateField('textField')"
      ></v-text-field>

      <v-btn type="submit">Submit</v-btn>
    </v-form>
  </v-container>
</template>

<script setup>
import { ref } from 'vue';
import { useForm, defineRule, configure } from 'vee-validate';
import * as yup from 'yup';

// 定义验证规则
const schema = yup.object({
  textField: yup
    .string()
    .min(3, '请输入3个以上文字')
    .matches(/^[a-zA-Z]+$/, '请全部输入英文字母')
    .matches(/^[a-z]+$/, '请全部输入小写')
    .required('此字段是必填的')
});

configure({
  generateMessage: ctx => {
    const messages = {
      required: `The field ${ctx.field} is required.`,
      min: `The field ${ctx.field} must be at least ${ctx.rule.params[0]} characters.`,
      matches: `The field ${ctx.field} must match the pattern.`,
    };

    return messages[ctx.rule.name] || `The field ${ctx.field} is invalid.`;
  },
  validateOnInput: true, // 启用输入时验证
});

const { handleSubmit, errors, validateField } = useForm({
  validationSchema: schema,
});

const form = ref({
  textField: ''
});

const onSubmit = handleSubmit((values) => {
  alert(JSON.stringify(values));
});
</script>

<style scoped>
/* 这里可以添加一些样式 */
</style>

