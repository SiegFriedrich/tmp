using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using commonapi.Models;
using commonapi.Shared;

namespace commonapi.Controllers
{
    [ApiController]
    [Route("api/sys")]
    public class AuthController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly IConfiguration _configuration;

        public AuthController(IUserService userService, IConfiguration configuration)
        {
            _userService = userService;
            _configuration = configuration;
        }

        [HttpGet("csrf-token")]
        public IActionResult Login()
        {
            //リクエストヘッダにて受け取ったリクエストID（ログトレース用） -> 仮値 ISJF9H92S82HFO9CEDWP03OL63E7T6RFW
            CommonUtil.AppendFrontResponseHeader(Response, "origin", "exampleRequestWith", "application/json", "exampleAccept", "exampleMaxdevice");
            var token = GenerateJwtToken();
            return Ok(new { CsrfToken = token });
        }

        private string GenerateJwtToken()
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
            var sub = "BV0183202";
            var TIME_SPAN = 24;
            var expirationTime = DateTimeOffset.Now.AddHours(TIME_SPAN).ToUnixTimeSeconds();

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.Now.ToUnixTimeSeconds().ToString()),
                new Claim(JwtRegisteredClaimNames.Sub, sub),
                new Claim(JwtRegisteredClaimNames.Exp, expirationTime.ToString()),
            };

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims,
                expires: DateTime.Now.AddHours(TIME_SPAN),
                signingCredentials: credentials);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}
