using Microsoft.AspNetCore.Mvc;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using commonapi.Models;
using commonapi.Shared;

namespace commonapi.Controllers
{
    [ApiController]
    [Route("api/sys")]
    public class AuthController : ControllerBase
    {
        private readonly IUserService _userService;
        private readonly IConfiguration _configuration;

        public AuthController(IUserService userService, IConfiguration configuration)
        {
            _userService = userService;
            _configuration = configuration;
        }

        [HttpGet("csrf-token")]
        public IActionResult Login()
        {
            //リクエストヘッダにて受け取ったリクエストID（ログトレース用） -> 仮値 ISJF9H92S82HFO9CEDWP03OL63E7T6RFW
            CommonUtil.AppendFrontResponseHeader(Response, "origin", "exampleRequestWith", "application/json", "exampleAccept", "exampleMaxdevice");
            var token = GenerateJwtToken();
            return Ok(new { CsrfToken = token });
        }

        private string GenerateJwtToken()
        {
            var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_configuration["Jwt:Key"]));
            var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);
            var sub = "BV0183202";
            var TIME_SPAN = 24;
            var expirationTime = DateTimeOffset.Now.AddHours(TIME_SPAN).ToUnixTimeSeconds();

            var claims = new[]
            {
                new Claim(JwtRegisteredClaimNames.Iat, DateTimeOffset.Now.ToUnixTimeSeconds().ToString()),
                new Claim(JwtRegisteredClaimNames.Sub, sub),
                new Claim(JwtRegisteredClaimNames.Exp, expirationTime.ToString()),
            };

            var token = new JwtSecurityToken(
                issuer: _configuration["Jwt:Issuer"],
                audience: _configuration["Jwt:Audience"],
                claims,
                expires: DateTime.Now.AddHours(TIME_SPAN),
                signingCredentials: credentials);

            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}



--------------------------------------------------------------------------------------

Assert.AreEqual に失敗しました。<OK> が必要ですが、<MethodNotAllowed> が指定されました。

--------------------------------------------------------------------------------------
Test method commonapi.Tests.AuthControllerTest.TestCsrfTokenEndpoint threw exception:
System.InvalidOperationException: Misused header name, 'Content-Type'. Make sure request headers are used with HttpRequestMessage, response headers with HttpResponseMessage, and content headers with HttpContent objects.

--------------------------------------------------------------------------------------

 public AuthControllerTest()
    {
        _client = new HttpClient();
        _client.BaseAddress = new System.Uri("http://localhost:8080");
    }
    [TestMethod]
    public async Task TestCsrfTokenEndpoint()
    {
        //Postリクエスト
        var request = new HttpRequestMessage(HttpMethod.Post, "/api/sys/csrf-token");
        request.Headers.Add("Content-Type", "application/json");
        request.Content = new StringContent(null, System.Text.Encoding.UTF8, "application/json");

        //Send the request
        var response = await _client.SendAsync(request);

        //レスポンスアサーション
        Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);

        //JSON Response 読み取り
        var jsonContent = await response.Content.ReadAsStringAsync();
        Assert.IsTrue(!string.IsNullOrWhiteSpace(jsonContent));
        // Assert.AreEqual(200, jsonContent.StatusCode);

        //レスポンスをオブジェクトにする
        var csrfTokenResponse = JsonConvert.DeserializeObject(jsonContent);
--------------------------------------------------------------------------------------
using System.Net;
using System.Net.Http;
using Newtonsoft.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization.Infrastructure;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Microsoft.Extensions.Configuration;
using Moq;
using commonapi.Controllers;
// using commonapi.Models;
using commonapi;

namespace commonapi.Tests;

[TestClass]
public class AuthControllerTest
{
    private readonly HttpClient _client;
    private AuthController _authController;
    private Mock<IUserService> _mockUserService;
    private Mock<IConfiguration> _mockConfiguration;


    //テスト要素初期化
    public AuthControllerTest()
    {
        _client = new HttpClient();
        _client.BaseAddress = new System.Uri("http://localhost:8080");

        //Mock UserService and IConfiguration
        _mockUserService = new Mock<IUserService>();
        _mockConfiguration = new Mock<IConfiguration>();

        _mockConfiguration.Setup(config => config["Jwt:Key"].Returns("ExampleJWTKeyForThisApplicationExampleJWTKeyForThisApplication"));
        _mockConfiguration.Setup(config => config["Jwt:Issuer"].Returns("http://localhost:8080"));
        _mockConfiguration.Setup(config => config["Jwt:Audience"].Returns("http://localhost:8080"));

        _authController = new AuthController(_mockUserService.Object, _mockConfiguration.Object);
    }

    // [TestInitialize]
    // public void Initialize()
    // {

    // }


    //正常系
    [TestMethod]
    public void Login_ReturnsOkWithCsrfToken()
    {
        var result = _authController.Login() as OkObjectResult;
        Assert.IsNotNull(result);
    }




    //API疎通テスト　GETメソッドで投げる時
    [TestMethod]
    public async Task TestCsrfTokenEndpointSuccess1()
    {
        //Getリクエスト
        var request = new HttpRequestMessage(HttpMethod.Get, "/api/sys/csrf-token");
        request.Content = new StringContent("", System.Text.Encoding.UTF8, "application/json");

        //Send the request
        var response = await _client.SendAsync(request);

        //レスポンスアサーション
        Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);

        //JSON Response 読み取り
        var jsonContent = await response.Content.ReadAsStringAsync();
        Assert.IsTrue(!string.IsNullOrWhiteSpace(jsonContent));
    }


    //異常系
    //API疎通テスト POSTメソッドで投げる時
    [TestMethod]
    public async Task TestCsrfTokenEndpointFail1()
    {
        //Postリクエスト
        var request = new HttpRequestMessage(HttpMethod.Post, "/api/sys/csrf-token");
        request.Content = new StringContent("", System.Text.Encoding.UTF8, "application/json");

        //Send the request
        var response = await _client.SendAsync(request);

        //レスポンスアサーション
        Assert.AreEqual(HttpStatusCode.MethodNotAllowed, response.StatusCode);
    }
}

----------------------------------------------------------------

AuthControllerTest.cs(35,62): error CS1061: 'string' に 'Returns' の定義が含まれておらず
、型 'string'


-----------------------------------------------------------
C:\temp\tokensample\tokensample\commonapi.Tests\Tests\AuthControllerTest.cs(52,37): error CS1031: 型が必要です [C:\temp\tokensample\tokensample\comm
onapi.Tests\commonapi.Tests.csproj]
C:\temp\tokensample\tokensample\commonapi.Tests\Tests\AuthControllerTest.cs(52,37): error CS1002: ; が必要です [C:\temp\tokensample\tokensample\com
monapi.Tests\commonapi.Tests.csproj]
C:\temp\tokensample\tokensample\commonapi.Tests\Tests\AuthControllerTest.cs(52,56): error CS1001: 識別子がありません [C:\temp\tokensample\tokensample\c
ommonapi.Tests\commonapi.Tests.csproj]
C:\temp\tokensample\tokensample\commonapi.Tests\Tests\AuthControllerTest.cs(52,56): error CS1002: ; が必要です [C:\temp\tokensample\tokensample\com
monapi.Tests\commonapi.Tests.csproj]
