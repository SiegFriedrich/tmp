//Server間の通信を処理する場合
using Microsoft.AspNetCore.Mvc;
using commonapi.Models;
using commonapi.Shared;
using Microsoft.AspNetCore.Authorization;

[Authorize]
[ApiController]
[Route("api/sys/server")]
public class SysServerController : ControllerBase
{
    [HttpPost("api-control")]
    public ActionResult PostApiControl([FromBody] Operation operation)
    {
        //共通方法を利用してリクエストのヘッダーをチェック
        CommonUtil.ValidateRequestHeader(Request.Headers, CommonUtil.SERVER);
        if (operation.OperationBusinnesId == "SYSTEM" && operation.Status == "0")
        {
            //共通方法を利用してリスポンスにヘッダーを追加
            CommonUtil.AppendServerResponseHeader(Response, "application/json", "nosniff", "SAMEORIGIN", "ISJF9H92S82HFO9CEDWP03OL63E7T6RFW");
            return Ok(new Operation { OperationBusinnesId = "SYSTEM", Status = "0" });
        }
        return Unauthorized();
    }
}

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using commonapi.Models;
using commonapi.Shared;

namespace commonapi.Tests
{
    [TestClass]
    public class SysServerControllerTests
    {
        [TestMethod]
        public void PostApiControl_ValidOperation_ReturnsOk()
        {
            // Arrange
            var controller = new SysServerController();
            var mockRequest = new Mock<HttpRequest>();
            var mockResponse = new Mock<HttpResponse>();
            mockRequest.SetupGet(r => r.Headers).Returns(new HeaderDictionary());
            mockResponse.SetupAllProperties();

            controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext
                {
                    Request = mockRequest.Object,
                    Response = mockResponse.Object
                }
            };

            var validOperation = new Operation { OperationBusinnesId = "SYSTEM", Status = "0" };

            // Act
            var result = controller.PostApiControl(validOperation);

            // Assert
            var okResult = result as OkObjectResult;
            Assert.IsNotNull(okResult);
            Assert.AreEqual(StatusCodes.Status200OK, okResult.StatusCode);

            // You can further assert the response headers or content here if needed.
        }

        [TestMethod]
        public void PostApiControl_InvalidOperation_ReturnsUnauthorized()
        {
            // Arrange
            var controller = new SysServerController();
            var mockRequest = new Mock<HttpRequest>();
            var mockResponse = new Mock<HttpResponse>();
            mockRequest.SetupGet(r => r.Headers).Returns(new HeaderDictionary());
            mockResponse.SetupAllProperties();

            controller.ControllerContext = new ControllerContext
            {
                HttpContext = new DefaultHttpContext
                {
                    Request = mockRequest.Object,
                    Response = mockResponse.Object
                }
            };

            var invalidOperation = new Operation { OperationBusinnesId = "INVALID", Status = "1" };

            // Act
            var result = controller.PostApiControl(invalidOperation);

            // Assert
            var unauthorizedResult = result as UnauthorizedResult;
            Assert.IsNotNull(unauthorizedResult);
        }
    }
}

