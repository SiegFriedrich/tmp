// http.js 或 axios.js
import axios from 'axios';
import store from './store'; // 假设你的Pinia store的实例

const http = axios.create({
  baseURL: 'your-api-base-url',
  // 其他配置...
});

http.interceptors.response.use(
  response => response,
  error => {
    const { status } = error.response;
    if (status === 500 || status === 422) {
      // 使用Pinia store来控制弹窗的显示
      store.useErrorStore().setError({
        message: error.response.data.message,
        show: true
      });
    }
    return Promise.reject(error);
  }
);

export default http;
// store/errorStore.js
import { defineStore } from 'pinia';

export const useErrorStore = defineStore('errorStore', {
  state: () => ({
    errorMessage: '',
    showError: false
  }),
  actions: {
    setError({ message, show }) {
      this.errorMessage = message;
      this.showError = show;
    }
  }
});
<template>
  <v-app>
    <v-dialog v-model="store.showError">
      <v-card>
        <v-card-title>Error</v-card-title>
        <v-card-text>{{ store.errorMessage }}</v-card-text>
        <v-card-actions>
          <v-btn color="primary" text @click="store.clearError">Close</v-btn>
        </v-card-actions>
      </v-card>
    </v-dialog>
  </v-app>
</template>

<script lang="ts" setup>
import { useErrorStore } from './stores/errorStore';

const store = useErrorStore();
</script>


<script setup>
import { useErrorStore } from './store/errorStore';

const errorStore = useErrorStore();
const showError = computed(() => errorStore.showError);
const errorMessage = computed(() => errorStore.errorMessage);

watch(showError, (newVal) => {
  if (!newVal) {
    errorStore.setError({ message: '', show: false });
  }
});
</script>

<template>
  <button @click="downloadFile">Download File</button>
</template>

<script lang="ts" setup>
import axios from 'axios';

const downloadFile = async () => {
  try {
    const response = await axios.get('your-file-url', {
      responseType: 'blob', // 重要：确保响应类型为blob，以便处理二进制文件内容
    });
    
    // 创建一个URL对象并生成下载链接
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'filename.ext'); // 设置下载文件的名称，例如 'document.pdf'
    document.body.appendChild(link);
    link.click();
    
    // 清理并释放URL对象
    link.remove();
    window.URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Download error:', error);
  }
};
</script>
